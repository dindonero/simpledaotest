{  
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "HoneyBadger",
          "fullDescription": {
            "text": "An analysis tool to detect honeypots in Ethereum smart contracts"
          },
          "informationUri": "https://honeybadger.uni.lu/",
          "rules": [],
          "version": "1.8.16"
        }
      },
      "artifacts": [],
      "logicalLocations": [],
      "results": []
    },
    {
      "tool": {
        "driver": {
          "name": "Maian",
          "fullDescription": {
            "text": "Maian is a tool for automatic detection of buggy Ethereum smart contracts of three different types prodigal, suicidal and greedy."
          },
          "informationUri": "https://github.com/ivicanikolicsg/MAIAN",
          "rules": [],
          "version": "5.10"
        }
      },
      "artifacts": [
        {
          "location": {
            "uri": "simple_dao"
          },
          "sourceLanguage": "Solidity"
        }
      ],
      "results": []
    },
    {
      "tool": {
        "driver": {
          "name": "Manticore",
          "fullDescription": {
            "text": "Manticore is a symbolic execution tool for analysis of smart contracts and binaries."
          },
          "informationUri": "https://github.com/trailofbits/manticore",
          "rules": [
            {
              "id": "Potentialreentrancyvulnerability",
              "shortDescription": {
                "text": "Potential reentrancy vulnerability"
              }
            },
            {
              "id": "Potentiallyreadinguninitializedstorage",
              "shortDescription": {
                "text": "Potentially reading uninitialized storage"
              }
            },
            {
              "id": "Reentrancymulti-millionetherbug",
              "shortDescription": {
                "text": "Reentrancy multi-million ether bug"
              }
            },
            {
              "id": "ReturnedvalueatCALLinstructionisnotused",
              "shortDescription": {
                "text": "Returned value at CALL instruction is not used"
              }
            },
            {
              "id": "Reachableetherleaktosender",
              "shortDescription": {
                "text": "Reachable ether leak to sender"
              }
            },
            {
              "id": "Reachableexternalcalltosender",
              "shortDescription": {
                "text": "Reachable external call to sender"
              }
            }
          ],
          "version": "0.3.5"
        }
      },
      "artifacts": [
        {
          "location": {
            "uri": "simple_dao.sol"
          },
          "sourceLanguage": "Solidity"
        }
      ],
      "results": [
        {
          "message": {
            "text": "Potential reentrancy vulnerability"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "simple_dao.sol"
                },
                "region": {
                  "snippet": {
                    "text": "credit[msg"
                  },
                  "startLine": 20
                }
              }
            }
          ],
          "ruleId": "Potentialreentrancyvulnerability"
        },
        {
          "message": {
            "text": "Potentially reading uninitialized storage"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "simple_dao.sol"
                },
                "region": {
                  "snippet": {
                    "text": "func"
                  },
                  "startLine": 12
                }
              }
            }
          ],
          "ruleId": "Potentiallyreadinguninitializedstorage"
        },
        {
          "message": {
            "text": "Reentrancy multi-million ether bug"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "simple_dao.sol"
                },
                "region": {
                  "snippet": {
                    "text": "credit[msg"
                  },
                  "startLine": 20
                }
              }
            }
          ],
          "ruleId": "Reentrancymulti-millionetherbug"
        },
        {
          "message": {
            "text": "Returned value at CALL instruction is not used"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "simple_dao.sol"
                },
                "region": {
                  "snippet": {
                    "text": "credit[msg"
                  },
                  "startLine": 20
                }
              }
            }
          ],
          "ruleId": "ReturnedvalueatCALLinstructionisnotused"
        },
        {
          "message": {
            "text": "Potentially reading uninitialized storage"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "simple_dao.sol"
                },
                "region": {
                  "snippet": {
                    "text": ""
                  },
                  "startLine": 18
                }
              }
            }
          ],
          "ruleId": "Potentiallyreadinguninitializedstorage"
        },
        {
          "message": {
            "text": "Reachable ether leak to sender"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "simple_dao.sol"
                },
                "region": {
                  "snippet": {
                    "text": "credit[msg"
                  },
                  "startLine": 20
                }
              }
            }
          ],
          "ruleId": "Reachableetherleaktosender"
        },
        {
          "message": {
            "text": "Potentially reading uninitialized storage"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "simple_dao.sol"
                },
                "region": {
                  "snippet": {
                    "text": "fun"
                  },
                  "startLine": 16
                }
              }
            }
          ],
          "ruleId": "Potentiallyreadinguninitializedstorage"
        },
        {
          "message": {
            "text": "Reachable external call to sender"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "simple_dao.sol"
                },
                "region": {
                  "snippet": {
                    "text": "credit[msg"
                  },
                  "startLine": 20
                }
              }
            }
          ],
          "ruleId": "Reachableexternalcalltosender"
        },
        {
          "message": {
            "text": "Potentially reading uninitialized storage"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "simple_dao.sol"
                },
                "region": {
                  "snippet": {
                    "text": "func"
                  },
                  "startLine": 24
                }
              }
            }
          ],
          "ruleId": "Potentiallyreadinguninitializedstorage"
        },
        {
          "message": {
            "text": "Potentially reading uninitialized storage"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "simple_dao.sol"
                },
                "region": {
                  "snippet": {
                    "text": ""
                  },
                  "startLine": 28
                }
              }
            }
          ],
          "ruleId": "Potentiallyreadinguninitializedstorage"
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Mythril",
          "fullDescription": {
            "text": "Mythril analyses EVM bytecode using symbolic analysis, taint analysis and control flow checking to detect a variety of security vulnerabilities."
          },
          "informationUri": "https://mythx.io/",
          "rules": [
            {
              "id": "IntegerOverflow",
              "fullDescription": {
                "text": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."
              },
              "shortDescription": {
                "text": "Integer Overflow "
              }
            },
            {
              "id": "Messagecalltoexternalcontract",
              "fullDescription": {
                "text": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."
              },
              "shortDescription": {
                "text": "Message call to external contract"
              }
            },
            {
              "id": "UncheckedCALLreturnvalue",
              "fullDescription": {
                "text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."
              },
              "shortDescription": {
                "text": "Unchecked CALL return value"
              }
            },
            {
              "id": "Statechangeafterexternalcall",
              "fullDescription": {
                "text": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities."
              },
              "shortDescription": {
                "text": "State change after external call"
              }
            }
          ],
          "version": "0.4.25"
        }
      },
      "artifacts": [],
      "logicalLocations": [
        {
          "kind": "function",
          "name": "fallback"
        },
        {
          "kind": "function",
          "name": "withdraw(uint256)"
        }
      ],
      "results": [
        {
          "message": {
            "text": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "snippet": {
                    "text": "= msg.value;\n  }\n\n  fun"
                  },
                  "startLine": 13
                }
              }
            },
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "fallback"
                }
              ]
            }
          ],
          "ruleId": "IntegerOverflow"
        },
        {
          "message": {
            "text": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "snippet": {
                    "text": "lue(amount)();\n      credit[msg"
                  },
                  "startLine": 19
                }
              }
            },
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "withdraw(uint256)"
                }
              ]
            }
          ],
          "ruleId": "Messagecalltoexternalcontract"
        },
        {
          "message": {
            "text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "snippet": {
                    "text": "lue(amount)();\n      credit[msg"
                  },
                  "startLine": 19
                }
              }
            },
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "withdraw(uint256)"
                }
              ]
            }
          ],
          "ruleId": "UncheckedCALLreturnvalue"
        },
        {
          "message": {
            "text": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "snippet": {
                    "text": "=amount;\n    }\n  }\n\n  func"
                  },
                  "startLine": 20
                }
              }
            },
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "withdraw(uint256)"
                }
              ]
            }
          ],
          "ruleId": "Statechangeafterexternalcall"
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Osiris",
          "fullDescription": {
            "text": "Osiris is an analysis tool to detect integer bugs in Ethereum smart contracts. Osiris is based on Oyente."
          },
          "informationUri": "https://github.com/christoftorres/Osiris",
          "rules": [
            {
              "id": "overflow_bugs",
              "shortDescription": {
                "text": "overflow_bugs"
              }
            },
            {
              "id": "underflow_bugs",
              "shortDescription": {
                "text": "underflow_bugs"
              }
            },
            {
              "id": "callstack_bug",
              "shortDescription": {
                "text": "callstack_bug"
              }
            },
            {
              "id": "reentrancy_bug",
              "shortDescription": {
                "text": "reentrancy_bug"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "artifacts": [
        {
          "location": {
            "uri": "dataset/reentrancy/simple_dao.sol"
          },
          "sourceLanguage": "Solidity"
        }
      ],
      "logicalLocations": [
        {
          "kind": "contract",
          "name": "SimpleDAO"
        }
      ],
      "results": [
        {
          "message": {
            "text": "overflow_bugs"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startColumn": 5,
                  "startLine": 13
                }
              }
            }
          ],
          "ruleId": "overflow_bugs"
        },
        {
          "message": {
            "text": "underflow_bugs"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startColumn": 7,
                  "startLine": 20
                }
              }
            }
          ],
          "ruleId": "underflow_bugs"
        },
        {
          "message": {
            "text": "callstack_bug"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startColumn": 18,
                  "startLine": 19
                }
              }
            }
          ],
          "ruleId": "callstack_bug"
        },
        {
          "message": {
            "text": "reentrancy_bug"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startColumn": 18,
                  "startLine": 19
                }
              }
            }
          ],
          "ruleId": "reentrancy_bug"
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Oyente",
          "fullDescription": {
            "text": "Oyente runs on symbolic execution, determines which inputs cause which program branches to execute, to find potential security vulnerabilities. Oyente works directly with EVM bytecode without access high level representation and does not provide soundness nor completeness."
          },
          "informationUri": "https://oyente.tech/",
          "rules": [
            {
              "id": "IntegerOverflow.",
              "shortDescription": {
                "text": "Integer Overflow."
              }
            },
            {
              "id": "CallstackDepthAttackVulnerability.",
              "shortDescription": {
                "text": "Callstack Depth Attack Vulnerability."
              }
            },
            {
              "id": "Re-EntrancyVulnerability.",
              "shortDescription": {
                "text": "Re-Entrancy Vulnerability."
              }
            }
          ],
          "version": "0.4.25"
        }
      },
      "artifacts": [
        {
          "location": {
            "uri": "dataset/reentrancy/simple_dao.sol"
          },
          "sourceLanguage": "Solidity"
        }
      ],
      "logicalLocations": [
        {
          "kind": "contract",
          "name": "SimpleDAO"
        }
      ],
      "results": [
        {
          "message": {
            "text": "Integer Overflow."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startColumn": 5,
                  "startLine": 13
                }
              }
            }
          ],
          "ruleId": "IntegerOverflow."
        },
        {
          "message": {
            "text": "Callstack Depth Attack Vulnerability."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startColumn": 18,
                  "startLine": 19
                }
              }
            }
          ],
          "ruleId": "CallstackDepthAttackVulnerability."
        },
        {
          "message": {
            "text": "Re-Entrancy Vulnerability."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startColumn": 18,
                  "startLine": 19
                }
              }
            }
          ],
          "ruleId": "Re-EntrancyVulnerability."
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Securify",
          "fullDescription": {
            "text": "Securify uses formal verification, also relying on static analysis checks. Securify\u2019s analysis consists of two steps. First, it symbolically analyzes the contract\u2019s dependency graph to extract precise semantic information from the code. Then, it checks compliance and violation patterns that capture sufficient conditions for proving if a property holds or not."
          },
          "informationUri": "https://github.com/eth-sri/securify2",
          "rules": [
            {
              "id": "TODReceiver",
              "shortDescription": {
                "text": "TODReceiver"
              }
            },
            {
              "id": "UnhandledException",
              "shortDescription": {
                "text": "UnhandledException"
              }
            },
            {
              "id": "TODTransfer",
              "shortDescription": {
                "text": "TODTransfer"
              }
            },
            {
              "id": "DAO",
              "shortDescription": {
                "text": "DAO"
              }
            },
            {
              "id": "TODAmount",
              "shortDescription": {
                "text": "TODAmount"
              }
            },
            {
              "id": "MissingInputValidation",
              "shortDescription": {
                "text": "MissingInputValidation"
              }
            },
            {
              "id": "UnrestrictedEtherFlow",
              "shortDescription": {
                "text": "UnrestrictedEtherFlow"
              }
            }
          ],
          "version": "0.4.25"
        }
      },
      "artifacts": [
        {
          "location": {
            "uri": "dataset/reentrancy/simple_dao.sol"
          },
          "sourceLanguage": "Solidity"
        }
      ],
      "logicalLocations": [
        {
          "kind": "contract",
          "name": "SimpleDAO"
        }
      ],
      "results": [
        {
          "message": {
            "text": "TODReceiver"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startLine": 18
                }
              }
            }
          ],
          "ruleId": "TODReceiver"
        },
        {
          "message": {
            "text": "UnhandledException"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startLine": 18
                }
              }
            }
          ],
          "ruleId": "UnhandledException"
        },
        {
          "message": {
            "text": "TODTransfer"
          },
          "level": "none",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startLine": 18
                }
              }
            }
          ],
          "ruleId": "TODTransfer"
        },
        {
          "message": {
            "text": "DAO"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startLine": 18
                }
              }
            }
          ],
          "ruleId": "DAO"
        },
        {
          "message": {
            "text": "TODAmount"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startLine": 18
                }
              }
            }
          ],
          "ruleId": "TODAmount"
        },
        {
          "message": {
            "text": "MissingInputValidation"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startLine": 23
                }
              }
            }
          ],
          "ruleId": "MissingInputValidation"
        },
        {
          "message": {
            "text": "MissingInputValidation"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startLine": 11
                }
              }
            }
          ],
          "ruleId": "MissingInputValidation"
        },
        {
          "message": {
            "text": "MissingInputValidation"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startLine": 9
                }
              }
            }
          ],
          "ruleId": "MissingInputValidation"
        },
        {
          "message": {
            "text": "MissingInputValidation"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startLine": 15
                }
              }
            }
          ],
          "ruleId": "MissingInputValidation"
        },
        {
          "message": {
            "text": "UnrestrictedEtherFlow"
          },
          "level": "none",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startLine": 18
                }
              }
            }
          ],
          "ruleId": "UnrestrictedEtherFlow"
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Slither",
          "fullDescription": {
            "text": "Slither is a Solidity static analysis framework written in Python 3. It runs a suite of vulnerability detectors and prints visual information about contract details. Slither enables developers to find vulnerabilities, enhance their code comphrehension, and quickly prototype custom analyses."
          },
          "informationUri": "https://github.com/crytic/slither",
          "rules": [
            {
              "id": "reentrancy-eth",
              "fullDescription": {
                "text": "Reentrancy in SimpleDAO.withdraw (/dataset/reentrancy/simple_dao.sol#16-24):\n\tExternal calls:\n\t- res = msg.sender.call.value(amount)() (/dataset/reentrancy/simple_dao.sol#19-20)\n\tState variables written after the call(s):\n\t- credit (/dataset/reentrancy/simple_dao.sol#20-24)\n"
              }
            },
            {
              "id": "external-function",
              "fullDescription": {
                "text": "SimpleDAO.donate (/dataset/reentrancy/simple_dao.sol#12-16) should be declared external\n"
              }
            },
            {
              "id": "solc-version",
              "fullDescription": {
                "text": "Detected issues with version pragma in /dataset/reentrancy/simple_dao.sol:\n\t- pragma solidity^0.4.2 (/dataset/reentrancy/simple_dao.sol#7-9): it allows old versions\n"
              }
            },
            {
              "id": "low-level-calls",
              "fullDescription": {
                "text": "Low level call in SimpleDAO.withdraw (/dataset/reentrancy/simple_dao.sol#16-24):\n\t-res = msg.sender.call.value(amount)() /dataset/reentrancy/simple_dao.sol#19-20\n"
              }
            }
          ],
          "version": "0.7.0"
        }
      },
      "results": [
        {
          "message": {
            "text": "Reentrancy in SimpleDAO.withdraw (/dataset/reentrancy/simple_dao.sol#16-24):\n\tExternal calls:\n\t- res = msg.sender.call.value(amount)() (/dataset/reentrancy/simple_dao.sol#19-20)\n\tState variables written after the call(s):\n\t- credit (/dataset/reentrancy/simple_dao.sol#20-24)\n"
          },
          "level": "error",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "withdraw"
                },
                {
                  "kind": "contract",
                  "name": "SimpleDAO"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "endLine": 24,
                  "startLine": 16
                }
              }
            },
            {
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "endLine": 20,
                  "snippet": {
                    "text": "res = msg.sender.call.value(amount)()"
                  },
                  "startLine": 19
                }
              }
            },
            {
              "logicalLocations": [
                {
                  "kind": "variables_written",
                  "name": "credit"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "endLine": 24,
                  "snippet": {
                    "text": "credit[msg.sender] -= amount"
                  },
                  "startLine": 20
                }
              }
            }
          ],
          "ruleId": "reentrancy-eth"
        },
        {
          "message": {
            "text": "SimpleDAO.donate (/dataset/reentrancy/simple_dao.sol#12-16) should be declared external\n"
          },
          "level": "note",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "donate"
                },
                {
                  "kind": "contract",
                  "name": "SimpleDAO"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "endLine": 16,
                  "startLine": 12
                }
              }
            }
          ],
          "ruleId": "external-function"
        },
        {
          "message": {
            "text": "SimpleDAO.withdraw (/dataset/reentrancy/simple_dao.sol#16-24) should be declared external\n"
          },
          "level": "note",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "withdraw"
                },
                {
                  "kind": "contract",
                  "name": "SimpleDAO"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "endLine": 24,
                  "startLine": 16
                }
              }
            }
          ],
          "ruleId": "external-function"
        },
        {
          "message": {
            "text": "SimpleDAO.queryCredit (/dataset/reentrancy/simple_dao.sol#24-27) should be declared external\n"
          },
          "level": "note",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "queryCredit"
                },
                {
                  "kind": "contract",
                  "name": "SimpleDAO"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "endLine": 27,
                  "startLine": 24
                }
              }
            }
          ],
          "ruleId": "external-function"
        },
        {
          "message": {
            "text": "Detected issues with version pragma in /dataset/reentrancy/simple_dao.sol:\n\t- pragma solidity^0.4.2 (/dataset/reentrancy/simple_dao.sol#7-9): it allows old versions\n"
          },
          "level": "note",
          "locations": [
            {
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "endLine": 9,
                  "snippet": {
                    "text": "^0.4.2"
                  },
                  "startLine": 7
                }
              }
            }
          ],
          "ruleId": "solc-version"
        },
        {
          "message": {
            "text": "Low level call in SimpleDAO.withdraw (/dataset/reentrancy/simple_dao.sol#16-24):\n\t-res = msg.sender.call.value(amount)() /dataset/reentrancy/simple_dao.sol#19-20\n"
          },
          "level": "note",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "withdraw"
                },
                {
                  "kind": "contract",
                  "name": "SimpleDAO"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "endLine": 24,
                  "startLine": 16
                }
              }
            },
            {
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "endLine": 20,
                  "snippet": {
                    "text": "res = msg.sender.call.value(amount)()"
                  },
                  "startLine": 19
                }
              }
            }
          ],
          "ruleId": "low-level-calls"
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "SmartCheck",
          "fullDescription": {
            "text": "Securify automatically checks for vulnerabilities and bad coding practices. It runs lexical and syntactical analysis on Solidity source code."
          },
          "informationUri": "https://tool.smartdec.net/",
          "rules": [
            {
              "id": "SOLIDITY_CALL_WITHOUT_DATA",
              "shortDescription": {
                "text": "SOLIDITY_CALL_WITHOUT_DATA"
              }
            },
            {
              "id": "SOLIDITY_PRAGMAS_VERSION",
              "shortDescription": {
                "text": "SOLIDITY_PRAGMAS_VERSION"
              }
            },
            {
              "id": "SOLIDITY_UPGRADE_TO_050",
              "shortDescription": {
                "text": "SOLIDITY_UPGRADE_TO_050"
              }
            },
            {
              "id": "SOLIDITY_VISIBILITY",
              "shortDescription": {
                "text": "SOLIDITY_VISIBILITY"
              }
            }
          ],
          "version": "0.0.12"
        }
      },
      "artifacts": [
        {
          "location": {
            "uri": "simple_dao"
          },
          "sourceLanguage": "Solidity"
        }
      ],
      "logicalLocations": [
        {
          "kind": "contract",
          "name": "simple_dao"
        }
      ],
      "results": [
        {
          "message": {
            "id": "om991k",
            "text": "SOLIDITY_CALL_WITHOUT_DATA"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "simple_dao"
                },
                "region": {
                  "snippet": {
                    "text": "call.value(amount)()"
                  },
                  "startColumn": 28,
                  "startLine": 19
                }
              }
            }
          ],
          "ruleId": "SOLIDITY_CALL_WITHOUT_DATA"
        },
        {
          "message": {
            "id": "23fc32",
            "text": "SOLIDITY_PRAGMAS_VERSION"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "simple_dao"
                },
                "region": {
                  "snippet": {
                    "text": "^"
                  },
                  "startColumn": 16,
                  "startLine": 7
                }
              }
            }
          ],
          "ruleId": "SOLIDITY_PRAGMAS_VERSION"
        },
        {
          "message": {
            "id": "83k1no",
            "text": "SOLIDITY_UPGRADE_TO_050"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "simple_dao"
                },
                "region": {
                  "snippet": {
                    "text": "call.value(amount)()"
                  },
                  "startColumn": 28,
                  "startLine": 19
                }
              }
            }
          ],
          "ruleId": "SOLIDITY_UPGRADE_TO_050"
        },
        {
          "message": {
            "id": "910067",
            "text": "SOLIDITY_VISIBILITY"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "simple_dao"
                },
                "region": {
                  "snippet": {
                    "text": "functiondonate(addressto)payable{credit[to]+=msg.value;}"
                  },
                  "startColumn": 2,
                  "startLine": 12
                }
              }
            }
          ],
          "ruleId": "SOLIDITY_VISIBILITY"
        },
        {
          "message": {
            "id": "910067",
            "text": "SOLIDITY_VISIBILITY"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "simple_dao"
                },
                "region": {
                  "snippet": {
                    "text": "functionwithdraw(uintamount){if(credit[msg.sender]>=amount){boolres=msg.sender.call.value(amount)();credit[msg.sender]-=amount;}}"
                  },
                  "startColumn": 2,
                  "startLine": 16
                }
              }
            }
          ],
          "ruleId": "SOLIDITY_VISIBILITY"
        },
        {
          "message": {
            "id": "910067",
            "text": "SOLIDITY_VISIBILITY"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "simple_dao"
                },
                "region": {
                  "snippet": {
                    "text": "functionqueryCredit(addressto)returns(uint){returncredit[to];}"
                  },
                  "startColumn": 2,
                  "startLine": 24
                }
              }
            }
          ],
          "ruleId": "SOLIDITY_VISIBILITY"
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Solhint",
          "fullDescription": {
            "text": "Open source project for linting solidity code. This project provide both security and style guide validations."
          },
          "informationUri": "https://protofire.github.io/solhint/",
          "rules": [
            {
              "id": "indent",
              "shortDescription": {
                "text": "Expected indentation of 4 spaces but found 2"
              }
            }
          ],
          "version": "3.3.2"
        }
      },
      "artifacts": [
        {
          "location": {
            "uri": "dataset/reentrancy/simple_dao.sol"
          },
          "sourceLanguage": "Solidity"
        }
      ],
      "logicalLocations": [
        {
          "kind": "contract",
          "name": "simple_dao"
        }
      ],
      "results": [
        {
          "message": {
            "text": "Expected indentation of 4 spaces but found 2"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startColumn": 3,
                  "startLine": 10
                }
              }
            }
          ],
          "ruleId": "indent"
        },
        {
          "message": {
            "text": "Expected indentation of 4 spaces but found 2"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startColumn": 3,
                  "startLine": 12
                }
              }
            }
          ],
          "ruleId": "indent"
        },
        {
          "message": {
            "text": "Expected indentation of 8 spaces but found 4"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startColumn": 5,
                  "startLine": 13
                }
              }
            }
          ],
          "ruleId": "indent"
        },
        {
          "message": {
            "text": "Expected indentation of 4 spaces but found 2"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startColumn": 3,
                  "startLine": 14
                }
              }
            }
          ],
          "ruleId": "indent"
        },
        {
          "message": {
            "text": "Expected indentation of 4 spaces but found 2"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startColumn": 3,
                  "startLine": 16
                }
              }
            }
          ],
          "ruleId": "indent"
        },
        {
          "message": {
            "text": "Expected indentation of 8 spaces but found 4"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startColumn": 5,
                  "startLine": 17
                }
              }
            }
          ],
          "ruleId": "indent"
        },
        {
          "message": {
            "text": "Expected indentation of 12 spaces but found 6"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startColumn": 7,
                  "startLine": 19
                }
              }
            }
          ],
          "ruleId": "indent"
        },
        {
          "message": {
            "text": "Expected indentation of 12 spaces but found 6"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startColumn": 7,
                  "startLine": 20
                }
              }
            }
          ],
          "ruleId": "indent"
        },
        {
          "message": {
            "text": "Expected indentation of 8 spaces but found 4"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startColumn": 5,
                  "startLine": 21
                }
              }
            }
          ],
          "ruleId": "indent"
        },
        {
          "message": {
            "text": "Expected indentation of 4 spaces but found 2"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startColumn": 3,
                  "startLine": 22
                }
              }
            }
          ],
          "ruleId": "indent"
        },
        {
          "message": {
            "text": "Expected indentation of 4 spaces but found 2"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startColumn": 3,
                  "startLine": 24
                }
              }
            }
          ],
          "ruleId": "indent"
        },
        {
          "message": {
            "text": "Expected indentation of 8 spaces but found 4"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startColumn": 5,
                  "startLine": 25
                }
              }
            }
          ],
          "ruleId": "indent"
        },
        {
          "message": {
            "text": "Expected indentation of 4 spaces but found 2"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataset/reentrancy/simple_dao.sol"
                },
                "region": {
                  "startColumn": 3,
                  "startLine": 26
                }
              }
            }
          ],
          "ruleId": "indent"
        }
      ]
    }
  ],
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json"
}
